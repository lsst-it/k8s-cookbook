---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    o11y.eu/exporter: "kafka"
  name: kminion
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: kminion
      app.kubernetes.io/name: kminion
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: kminion
        app.kubernetes.io/name: kminion
    spec:
      containers:
      - env:
        - name: CONFIG_FILEPATH
          value: /etc/kminion/config.yaml
        image: redpandadata/kminion:v2.2.5
        imagePullPolicy: IfNotPresent
        name: kminion
        ports:
        - containerPort: 8080
          name: metrics
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /ready
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 250m
            memory: 256Mi
          requests:
            cpu: 250m
            memory: 256Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/kminion
          name: config
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 99
        runAsUser: 99
      serviceAccount: kminion
      serviceAccountName: kminion
      terminationGracePeriodSeconds: 30
      volumes:
      - name: config
        defaultMode: 420
        secret:
          secret-name: kminion-config
---
# Source: kminion/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kminion
  namespace: monitoring
  labels:
    app.kubernetes.io/name: kminion
    app.kubernetes.io/instance: kminion
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: metrics
    protocol: TCP
    name: metrics
  selector:
    app.kubernetes.io/name: kminion
    app.kubernetes.io/instance: kminion
---
# Source: kminion/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kminion
  namespace: monitoring
  labels:
    app.kubernetes.io/name: kminion
    app.kubernetes.io/instance: kminion
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-dev
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    nginx.ingress.kubernetes.io/server-snippet: |
      proxy_ssl_verify off;
spec:
  tls:
  - hosts:
    - kminion.o11y.dev.lsst.org
    secretName: tls-kminion-ingress
  rules:
  - host: kminion.o11y.dev.lsst.org
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: kminion
            port:
              number: 8080
---
# Source: kminion/templates/servicemonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: kminion
  namespace: monitoring
  labels:
    app.kubernetes.io/name: kminion
    app.kubernetes.io/instance: kminion
    o11y.eu/monitor: enabled
    release: kube-prometheus-stack
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: kminion
      app.kubernetes.io/instance: kminion
  endpoints:
  - port: metrics
    path: /metrics
    honorLabels: false
    scrapeTimeout: 10s
    interval: 15s
---
# Source: kminion/templates/poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: kminion
  namespace: monitoring
  labels:
    app.kubernetes.io/name: kminion
    app.kubernetes.io/instance: kminion
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kminion
      app.kubernetes.io/instance: kminion
---
# Source: kminion/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kminion
  namespace: monitoring
  labels:
    app.kubernetes.io/name: kminion
    app.kubernetes.io/instance: kminion
