---
prometheus:
  prometheusSpec:
    externalUrl: https://prometheus.${ .ClusterName }.${ .ClusterLabels.site }.lsst.org
    remoteWrite:
      - url: http://mimir-distributed-gateway.mimir:80/api/v1/push
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt
      nginx.ingress.kubernetes.io/backend-protocol: HTTP
    paths:
      - /
    pathType: Prefix
    hosts:
      - prometheus.${ .ClusterName }.${ .ClusterLabels.site }.lsst.org
    tls:
      - secretName: tls-prometheus-ingress
        hosts:
          - prometheus.${ .ClusterName }.${ .ClusterLabels.site }.lsst.org

alertmanager:
  alertmanagerSpec:
    externalUrl: https://alertmanager.${ .ClusterName }.${ .ClusterLabels.site }.lsst.org
    secrets:
      - alertmanager-webhooks
    configMaps:
      - alertmanager-templates
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt
      nginx.ingress.kubernetes.io/backend-protocol: HTTP
    paths:
      - /
    pathType: Prefix
    hosts:
      - alertmanager.${ .ClusterName }.${ .ClusterLabels.site }.lsst.org
    tls:
      - secretName: tls-alertmanager-ingress
        hosts:
          - alertmanager.${ .ClusterName }.${ .ClusterLabels.site }.lsst.org
  config:
    global:
      resolve_timeout: 5m
    inhibit_rules:
      - source_matchers:
          - alertname = "InfoInhibitor"
        target_matchers:
          - severity = "info"
        equal: [namespace]
      - source_matchers:
          - severity = "critical"
        target_matchers:
          - severity =~ "info|warning"
        equal: [alertname]
      - source_matchers:
          - severity = "warning"
        target_matchers:
          - severity = "info"
        equal: [alertname]
    templates:
      - /etc/alertmanager/configmaps/alertmanager-templates/*.tmpl

grafana:
  enabled: true
  serviceMonitor:
    labels:
      lsst.io/monitor: "true"
  resources:
    limits:
      cpu: 4
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 512Mi
  persistence:
    enabled: true
  deploymentStrategy:
    type: Recreate  # default is RollingUpdate, which doesn't work w/ persistence enabled
  grafana.ini:
    server:
      domain: grafana.${ .ClusterName }.${ .ClusterLabels.site }.lsst.org
      root_url: https://grafana.${ .ClusterName }.${ .ClusterLabels.site }.lsst.org
    feature_toggles:
      enable: autoMigrateOldPanels
    auth.generic_oauth:
      allow_assign_grafana_admin: true
      allow_sign_up: true
      api_url: $__file{/etc/secrets/keycloak-credentials/url}/realms/master/protocol/openid-connect/userinfo
      auth_url: $__file{/etc/secrets/keycloak-credentials/url}/realms/master/protocol/openid-connect/auth
      client_id: $__file{/etc/secrets/keycloak-credentials/client_id}
      client_secret: $__file{/etc/secrets/keycloak-credentials/client_secret}
      email_attribute_path: email
      enabled: true
      group_attribute_path: groups
      login_attribute_path: preferred_username
      name: $__file{/etc/secrets/keycloak-credentials/url}
      role_attribute_path: contains(groups[*], 'grafana-admin') && 'GrafanaAdmin' || contains(groups[*], 'grafana-admin') && 'Admin' || contains(groups[*], 'grafana-editor') && 'Editor' || 'Viewer'
      scopes: openid profile email groups roles offline_access
      token_url: https://keycloak.ls.lsst.org/realms/master/protocol/openid-connect/token
      use_refresh_token: true
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt
      nginx.ingress.kubernetes.io/backend-protocol: HTTP
    paths:
      - /
    pathType: Prefix
    hosts:
      - grafana.${ .ClusterName }.${ .ClusterLabels.site }.lsst.org
    tls:
      - secretName: tls-grafana-ingress
        hosts:
          - grafana.${ .ClusterName }.${ .ClusterLabels.site }.lsst.org
  sidecar:
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 256Mi
    alerts:
      enabled: true
    dashboards:
      enabled: true
    datasources:
      enabled: true
  extraSecretMounts:
    - name: keycloak-credentials
      mountPath: /etc/secrets/keycloak-credentials
      secretName: grafana-keycloak-credentials
      readOnly: true
  plugins:
    - grafana-opensearch-datasource
  datasources:
    datasource.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          uid: prometheus
          url: http://kube-prometheus-stack-prometheus.kube-prometheus-stack:9090/
          access: proxy
          jsonData:
            httpMethod: POST
            timeInterval: 30s
        - name: Mimir
          type: prometheus
          uid: mimir
          url: http://mimir-distributed-gateway.mimir:80/prometheus
          access: proxy
          isDefault: true
          jsonData:
            httpMethod: POST
            timeInterval: 30s
        - name: Alertmanager
          type: alertmanager
          uid: alertmanager
          url: http://kube-prometheus-stack-alertmanager.kube-prometheus-stack:9093/
          access: proxy
          jsonData:
            handleGrafanaManagedAlerts: false
            implementation: prometheus
        - name: logs-kube
          type: grafana-opensearch-datasource
          uid: os-logs-kube
          basicAuth: true
          basicAuthUser: $OS_LOGGING_USERNAME
          url: https://opensearch.${ .ClusterName }.${ .ClusterLabels.site }.lsst.org
          access: proxy
          jsonData:
            database: logs-kube*
            flavor: opensearch
            logLevelField: ""
            logMessageField: log
            maxConcurrentShardRequests: 5
            oauthPassThru: true
            pplEnabled: true
            timeField: "@timestamp"
            version: 2.11.0
          secureJsonData:
            basicAuthPassword: $OS_LOGGING_PASSWORD
        - name: logs-hosts
          type: grafana-opensearch-datasource
          uid: os-logs-hosts
          basicAuth: true
          basicAuthUser: $OS_LOGGING_USERNAME
          url: https://opensearch.${ .ClusterName }.${ .ClusterLabels.site }.lsst.org
          access: proxy
          jsonData:
            database: logs-hosts*
            flavor: opensearch
            logLevelField: ""
            logMessageField: message
            maxConcurrentShardRequests: 5
            oauthPassThru: true
            pplEnabled: true
            timeField: "@timestamp"
            version: 2.11.0
          secureJsonData:
            basicAuthPassword: $OS_LOGGING_PASSWORD
        - name: logs-firewall
          type: grafana-opensearch-datasource
          uid: os-logs-firewall
          basicAuth: true
          basicAuthUser: $OS_LOGGING_USERNAME
          url: https://opensearch.${ .ClusterName }.${ .ClusterLabels.site }.lsst.org
          access: proxy
          jsonData:
            database: logs-firewall*
            flavor: opensearch
            logLevelField: ""
            logMessageField: message
            maxConcurrentShardRequests: 5
            oauthPassThru: true
            pplEnabled: true
            timeField: "@timestamp"
            version: 2.11.0
          secureJsonData:
            basicAuthPassword: $OS_LOGGING_PASSWORD
        - name: logs-network
          type: grafana-opensearch-datasource
          uid: os-logs-network
          basicAuth: true
          basicAuthUser: $OS_LOGGING_USERNAME
          url: https://opensearch.${ .ClusterName }.${ .ClusterLabels.site }.lsst.org
          access: proxy
          jsonData:
            database: logs-network*
            flavor: opensearch
            logLevelField: ""
            logMessageField: message
            maxConcurrentShardRequests: 5
            oauthPassThru: true
            pplEnabled: true
            timeField: "@timestamp"
            version: 2.11.0
          secureJsonData:
            basicAuthPassword: $OS_LOGGING_PASSWORD
  envFromSecrets:
    - name: grafana-opensearch-credentials
