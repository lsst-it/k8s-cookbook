---
apiVersion: opensearch.opster.io/v1
kind: OpenSearchCluster
metadata:
  finalizers:
  - Opster
  name: logging
spec:
  bootstrap:
    resources: {}
  confMgmt: {}
  dashboards:
    enable: true
    tls:
      enable: true
      generate: false
      secret:
        name: opensearch-dashboards-certs
    basePath: "/dashboard"
    opensearchCredentialsSecret:
      name: opensearch-dashboard-server-credentials
    replicas: 2
    labels:
      lsst.io/monitor: "true"
      prometheus.io/scrape: "true"
    resources:
      limits:
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 1Gi
    service:
      type: ClusterIP
    version: &os_version 2.11.0
    additionalConfig:
      logging.verbose: "true"
      opensearch.requestHeadersWhitelist: '[authorization, securitytenant]'
      opensearch.ssl.verificationMode: "full"
      opensearch_security.auth.type: '["basicauth", "openid"]'
      opensearch_security.auth.multiple_auth_enabled: "true"
      opensearch_security.openid.base_redirect_url: "https://opensearch.ayekan.dev.lsst.org/dashboard"
      opensearch_security.openid.client_id: "${KEYCLOAK_CLIENT_ID}"
      opensearch_security.openid.client_secret: "${KEYCLOAK_CLIENT_SECRET}"
      opensearch_security.openid.connect_url: "${KEYCLOAK_URL}"
      opensearch_security.openid.header: "Authorization"
      opensearch_security.openid.scope: "openid profile email offline_access"
      opensearch_security.ui.openid.login.buttonname: "Login with keycloak.ls.lsst.org"
      opensearch_security.multitenancy.enabled: "true"
      opensearch_security.multitenancy.tenants.enable_global: "true"
      opensearch_security.multitenancy.tenants.enable_private: "false"
      opensearch_security.multitenancy.tenants.preferred: ["lsst", "Global"]
      opensearch_security.multitenancy.enable_filter: "false"
    env:
    - name: KEYCLOAK_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: opensearch-keycloak-credentials
          key: CLIENT_ID
    - name: KEYCLOAK_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: opensearch-keycloak-credentials
          key: CLIENT_SECRET
    - name: KEYCLOAK_URL
      valueFrom:
        secretKeyRef:
          name: opensearch-keycloak-credentials
          key: url
  security:
    tls:
      # TODO: figure out a certificate differentiation for the transport and
      # admin interface.
      # sources:
      # - https://github.com/opensearch-project/opensearch-k8s-operator/blob/main/docs/userguide/main.md
      # - https://github.com/opensearch-project/opensearch-k8s-operator/issues/141
      # - https://github.com/opensearch-project/opensearch-k8s-operator/issues/338
      transport:
        generate: false
        perNode: false
        secret:
          name: opensearch-certs
        nodesDn: ["CN=Opensearch_Node"]
        adminDn: ["CN=OpenSearch_Admin"]
      # We don't directly expose the HTTP API externally, so no need to handle
      # TLS here for the HTTP API
      http:
        generate: false
        secret:
          name: opensearch-certs
    config:
      securityConfigSecret:
        name: opensearch-security-config
      adminSecret:
        name: opensearch-admin-certs
      adminCredentialsSecret:
        name: opensearch-admin-credentials
  general:
    httpPort: 9200
    serviceName: logging
    setVMMaxMapCount: true
    version: *os_version
    monitoring:
      enable: true
      scrapeInterval: 30s
      pluginUrl: "https://github.com/aiven/prometheus-exporter-plugin-for-opensearch/releases/download/2.11.0.0/prometheus-exporter-2.11.0.0.zip"
      tlsConfig:
        insecureSkipVerify: true
    additionalConfig:
      plugins.security.ssl.transport.enforce_hostname_verification: "false"
      plugins.security.allow_unsafe_democertificates: "false"
  initHelper:
    resources:
      requests:
        memory: 256Mi
        cpu: 500m
      limits:
        memory: 256Mi
  nodePools:
  - component: cluster-manager
    replicas: 3
    diskSize: 5Gi
    labels:
      lsst.io/author: fbegyn
      lsst.io/monitor: "true"
      prometheus.io/scrape: "true"
    jvm: -Xmx3G -Xms3G
    resources:
      requests:
        memory: 4Gi
        cpu: "1"
      limits:
        memory: 4Gi
    roles:
    - cluster_manager
    - master
    persistence:
      pvc:
        storageClass: rook-ceph-block
        accessModes:
        - ReadWriteOnce
  - component: coordinators
    replicas: 3
    diskSize: 2Gi
    jvm: -Xmx3G -Xms3G
    labels:
      lsst.io/author: fbegyn
      lsst.io/monitor: "true"
      prometheus.io/scrape: "true"
    resources:
      requests:
        memory: 4Gi
        cpu: "4"
      limits:
        memory: 4Gi
    roles:
    - coordinating
    persistence:
      emptyDir: {}
  - component: hot-nodes
    replicas: 3
    diskSize: 100Gi
    jvm: -Xmx14G -Xms14G
    labels:
      lsst.io/author: fbegyn
      lsst.io/monitor: "true"
      prometheus.io/scrape: "true"
    resources:
      requests:
        memory: 16Gi
        cpu: "8"
      limits:
        memory: 16Gi
    additionalConfig:
      node.attr.temp: hot
    roles:
    - data
    - ingest
    persistence:
      pvc:
        storageClass: rook-ceph-block
        accessModes:
        - ReadWriteOnce
  - component: cold-nodes
    replicas: 3
    diskSize: 100Gi
    jvm: -Xmx7G -Xms7G
    labels:
      lsst.io/author: fbegyn
      lsst.io/monitor: "true"
      prometheus.io/scrape: "true"
    resources:
      requests:
        memory: 8Gi
        cpu: "4"
      limits:
        memory: 8Gi
    additionalConfig:
      node.attr.temp: cold
    roles:
    - data
    persistence:
      pvc:
        storageClass: rook-ceph-block
        accessModes:
        - ReadWriteOnce
