rbac:
  create: true

alloy:
  controller:
    type: daemonset

  mounts:
    varlog: true

  configMap:
    content: |
      logging {
        level  = "info"
        format = "logfmt"
      }

      local.file_match "node_logs" {
        path_targets = [{
            __path__  = "/var/log/*.log",
            job       = "node/syslog",
            node_name = sys.env("HOSTNAME"),
            cluster   = "${ get .ClusterLabels "management.cattle.io/cluster-display-name" }",
        }]
      }

      loki.source.file "node_logs" {
        targets    = local.file_match.node_logs.targets
        forward_to = [loki.write.send.receiver]
      }

      discovery.kubernetes "pod" {
        role = "pod"
      }

      discovery.relabel "pod_logs" {
        targets = discovery.kubernetes.pod.targets

        rule {
          source_labels = ["__meta_kubernetes_namespace"]
          action = "replace"
          target_label = "namespace"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_name"]
          action = "replace"
          target_label = "pod"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_container_name"]
          action = "replace"
          target_label = "container"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
          action = "replace"
          target_label = "app"
        }

        rule {
          source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
          action = "replace"
          target_label = "job"
          separator = "/"
          replacement = "$1"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
          action = "replace"
          target_label = "__path__"
          separator = "/"
          replacement = "/var/log/pods/*$1/*.log"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_container_id"]
          action = "replace"
          target_label = "container_runtime"
          regex = "^(\\S+):\\/\\/.+$"
          replacement = "$1"
        }
      }

      loki.source.kubernetes "pod_logs" {
        targets    = discovery.relabel.pod_logs.output
        forward_to = [loki.process.pod_logs.receiver]
      }

      loki.process "pod_logs" {
        stage.static_labels {
            values = {
              cluster = "${ get .ClusterLabels "management.cattle.io/cluster-display-name" }",
              job = "k8s/logs",
            }
        }

        forward_to = [loki.write.send.receiver]
      }

      discovery.relabel "systemd_journal" {
          targets = []

          rule {
              source_labels = ["__journal__systemd_unit"]
              target_label  = "unit"
          }

          rule {
              source_labels = ["__journal__hostname"]
              target_label  = "hostname"
          }

          rule {
              source_labels = ["__journal__boot_id"]
              target_label  = "boot_id"
          }

          rule {
              source_labels = ["__journal__machine_id"]
              target_label  = "machine_id"
          }

          rule {
              source_labels = ["__journal__priority"]
              target_label  = "priority"
          }

          rule {
              source_labels = ["__journal__syslog_identifier"]
              target_label  = "syslog_identifier"
          }

          rule {
              source_labels = ["__journal__transport"]
              target_label  = "transport"
          }

          rule {
              source_labels = ["unit"]
              target_label  = "_stream"
              replacement   = "unit=\"$1\""
          }
      }

      loki.source.journal "systemd_journal" {
          relabel_rules = discovery.relabel.systemd_journal.rules
          labels        = { job = "node/journal" }
          forward_to    = [loki.write.send.receiver]
      }
 
      livedebugging {
        enabled = true
      }

      loki.write "send" {
        endpoint {
          url = "https://loki.kona.dev.lsst.org/loki/api/v1/push"
        }
      }
